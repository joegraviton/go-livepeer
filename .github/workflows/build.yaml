name: Build binaries

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build binaries for ${{ matrix.platform.name }}-${{ matrix.arch }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
        platform:
          - name: linux
            os: ubuntu-18.04

    steps:
      - name: Check out code
        uses: actions/checkout@v3.2.0
        with:
          fetch-depth: 0
          # Check https://github.com/livepeer/go-livepeer/pull/1891
          # for ref value discussion
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up go
        id: go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17
          go-version-file: go.mod
          cache: true
          cache-dependency-path: go.sum

      - name: Cache ffmpeg
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: ~/compiled
          key: ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.arch }}-ffmpeg-${{ hashFiles('**/install_ffmpeg.sh') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.arch }}-ffmpeg-

      - name: Cache binaries
        uses: actions/cache@v3
        with:
          path: ~/build
          key: ${{ runner.os }}-${{ matrix.platform.name }}-${{ matrix.arch }}-binaries-${{ github.sha }}

      - name: Set build environment
        run: |
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "GOOS=${{ matrix.platform.name }}" >> $GITHUB_ENV
          echo "GO_BUILD_DIR=lp-builds/" >> $GITHUB_ENV

      - name: Install dependencies
        if: matrix.platform.name == 'darwin'
        run: brew install coreutils

      - name: Install dependencies
        if: matrix.platform.name != 'darwin'
        run: |
          sudo apt-get update \
            && sudo apt-get install -y software-properties-common curl apt-transport-https \
            && sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 15CF4D18AF4F7421 \
            && sudo add-apt-repository "deb [arch=amd64] http://apt.llvm.org/xenial/ llvm-toolchain-xenial-12 main" \
            && sudo apt-get update \
            && sudo apt-get -y install clang-12 clang-tools-12 lld-12 build-essential pkg-config autoconf git python gcc-multilib libgcc-8-dev-arm64-cross mingw-w64-tools gcc-mingw-w64-x86-64

          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 30 \
            && sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 30 \
            && sudo update-alternatives --install /usr/bin/ld ld /usr/bin/lld-12 30

      - name: Install go modules
        if: steps.go.outputs.cache-hit != 'true'
        run: go mod download

      - name: Install ffmpeg
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: ./install_ffmpeg.sh

      - name: Build binaries
        run: |
          export PKG_CONFIG_PATH=~/compiled/lib/pkgconfig
          ./ci_env.sh make
        env:
          GHA_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}

      - uses: actions-ecosystem/action-regex-match@v2
        id: match-tag
        with:
          text: ${{ github.ref_name }}
          regex: '^(master|main|v[0-9]+\.\d+\.\d+)$'

      - name: Codesign and notarize binaries
        if: steps.match-tag.outputs.match != '' && matrix.platform.name == 'darwin'
        uses: livepeer/action-gh-codesign-apple@latest
        with:
          developer-certificate-id: ${{ secrets.CI_MACOS_CERTIFICATE_ID }}
          developer-certificate-base64: ${{ secrets.CI_MACOS_CERTIFICATE_BASE64 }}
          developer-certificate-password: ${{ secrets.CI_MACOS_CERTIFICATE_PASSWORD }}
          app-notarization-email: ${{ secrets.CI_MACOS_NOTARIZATION_USER }}
          app-notarization-password: ${{ secrets.CI_MACOS_NOTARIZATION_PASSWORD }}
          binary-path: "lp-builds/"
          app-bundle-id: "org.livepeer.livepeer"

      - name: Upload build
        if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GHA_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}
          GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
          GCLOUD_SECRET: ${{ secrets.GCLOUD_SECRET }}
          DISCORD_URL: ${{ secrets.DISCORD_URL }}
        run: ./upload_build.sh

      - name: Upload artifacts for cutting release
        uses: actions/upload-artifact@master
        with:
          name: release-artifacts
          path: releases/
